{"componentChunkName":"component---src-templates-post-js","path":"/how-to-build-a-design-system/","result":{"pageContext":{"id":"0","slug":"how-to-build-a-design-system","article":{"id":"0","title":"How to build a design system","slug":"how-to-build-a-design-system","date":"2025-07-16","excerpt":"Company wide design system when environments are using many different technologies.","tags":["design system","tokens","cross-platform","collaboration","workflow","adoption","scaling","guidelines","design tokens","Figma","Supernova","Tailwind","MUI","JSON","consistency","tech debt"],"categories":["Projects","Design Systems"],"content":[{"type":"heading","text":"What problem are we trying to solve?"},{"type":"paragraph","text":"\n        Imagine a **mid-size company** with **200+ employees**, **10+ different teams**, and **5+ different technologies**, including web and mobile applications. \n        Each environment has its own **legacy** and **practices** in terms of style implementation.\n        Each team can work in any environment depending on the project. There is a **dedicated designer** for each team. This organization allows each team to focus on a specific **mission** rather than a specific technology but it makes it difficult \n        for engineers to adapt to each different environment's **legacy code** and **best practices**.\n      "},{"type":"paragraph","text":"The consequences, in terms of styling, are:"},{"type":"list","items":["**Unmaintainable styles** with hardcoded values","**Redundant code** – engineers avoid reusing components or values for fear of breaking other parts of the application","**Inconsistent design** and components across platforms"]},{"type":"paragraph","text":"In three words: **tech debt increases**."},{"type":"paragraph","text":"The root cause is the lack of a shared, authoritative **source of truth** for **styling**."},{"type":"list","items":["Each environment has solved styling in its own **siloed way**. There’s **no global strategy**. **No unified vision**."]},{"type":"separator"},{"type":"heading","text":"Stage 0: The Variables"},{"type":"paragraph","text":"\n        CSS and associated frameworks have gone a long way. They offer a lot of flexibility and power. How many engineers have had a deep feeling of accomplishment when replacing hard-coded values with CSS variables?\n        It feels good, it looks better, and you can now change a value everywhere with one change. But very quickly, new variables are added, engineers are reluctant to change existing variables' values because it's beyond the scope of their task and they are unsure of the consequences. Variables' power will cause their downfall. They will multiply and become unmanageable.\n      "},{"type":"paragraph","text":"\n        These variables only exist in code; their names are very often the arbitrary creation of one engineer. In most cases, you will see some variations appear: blue1 will follow blue, and primary-light will follow primary. Watch them grow into primary-lighter or blue1-darker.\n      "},{"type":"paragraph","text":"\n        The problem is that these variables are not shared. They are not part of a design system. They are not part of a shared vocabulary. They are not part of a shared understanding.\n        They are not part of a shared culture. They are not part of a shared language.\n      "},{"type":"paragraph","text":"\n        The problem is that these variables are not shared. They are not part of a design system. They are not part of a shared vocabulary. They are not part of a shared understanding.\n      "},{"type":"heading","text":"Stage 1: The Guidelines"},{"type":"paragraph","text":"\n        This is usually the **first attempt** at solving the chaos.\n        **Courageous engineers** comb through codebases and documentation in an effort to define **cross-environment styling guidelines**. \n        They consult with **engineering leads** and **code owners** to understand existing patterns and challenges. They come accross the many variables and try to establish naming conventions.\n      "},{"type":"paragraph","text":"\n        They write **documentation**. But the reality is, **guidelines aren’t enough**. \n        They help **standardize** practices within a team or repository—but they do not prevent **divergence** across environments.\n      "},{"type":"quote","text":"\n        In the absence of a Design System, guidelines are often too vague to be useful or too detailed to be followed. \n      "},{"type":"paragraph","text":"\n        At this point, engineers begin to realize the scope of the problem. **It’s not just technical—it’s organizational**.\n        Solving this problem seems like a herculean task that cannot be owned by engineering alone.\n      "},{"type":"separator"},{"type":"heading","text":"Stage 2: A holistic approach"},{"type":"paragraph","text":"\n        We need to understand the problem from a holistic perspective. We won't be able to systematize styling if we don't understand the styles life cycle: \n      "},{"type":"list","items":["How it is created","How it travels from designers to engineers","How it is used in production"]},{"type":"paragraph","text":"**Designers are producers**, they produce styled UI elements.\n        Understanding their **tools**, **feedback cycles**, and **creative expectations** is critical if we want to systematize styling implementation."},{"type":"paragraph","text":"Designers will be consumers and co-owners of the system, therefore it cannot be built without them."},{"type":"heading","text":"Stage 3: Building the Styling Dictionary"},{"type":"paragraph","text":"\n        The first meaningful step is creating a **styling dictionary**: a shared, structured collection of **design values** expressed as **tokens**.\n        This is a **collaborative effort** between design and engineering. Together, we define:\n      "},{"type":"list","items":["**Base tokens**: raw values like colors, spacing, font sizes (#000, 8px, 1.5rem)","**Semantic tokens**: named purpose-driven values like primary-text, surface-background, action-hover","**Component tokens**: scoped tokens like card-padding, button-radius, form-border"]},{"type":"paragraph","text":"\n        The **naming system** is inspired by utility-first frameworks like **Tailwind**—predictable, human-readable, and scalable.\n      "},{"type":"paragraph","text":"But here’s the balance you must strike:"},{"type":"list","items":["**Designers need enough expressive vocabulary** to stay creative","The system must stay **opinionated and systematic**—if everything is allowed, it’s not a system"]},{"type":"quote","text":"If everything is allowed, it’s not really a system anymore, is it?"},{"type":"paragraph","text":"\n        It's not just about building tooling for developers -  it's about **formalizing how designers express intent**.\n      "},{"type":"heading","text":"Stage 4: Aligning Workflows"},{"type":"paragraph","text":"\n        A dictionary alone won’t solve anything if teams don’t use it.\n        The next step is **aligning workflows**:\n      "},{"type":"list","items":["How do designers use these tokens in **Figma** or **Sketch**?","How are these values surfaced to **engineers**?","How are **updates proposed and approved**?","How do tokens move from **idea → prototype → production**?"]},{"type":"paragraph","text":"\n        Expose the design system in ways that are **native to both disciplines**:\n        Designers see tokens in **Figma plugins** or tools like **Supernova**,\n        Engineers consume them through **theme files**, **constants**, or **utility classes**.\n      "},{"type":"heading","text":"Stage 5: Implementation Across Platforms"},{"type":"paragraph","text":"\n        You don’t need to build a full platform to get started. In fact, you **shouldn’t**.\n        Start with the **simplest, most portable format**: a structured **JSON file**.\n      "},{"type":"paragraph","text":"\n        This **JSON object** becomes the **source of truth** for tokens. Any platform—web, native, server-rendered—can consume it.\n      "},{"type":"list","items":["Every team has access to **consistent values**","The system is immediately **useful in any environment**","You can **evolve tooling** around it without breaking things"]},{"type":"heading","text":"Stage 6: Scaling the Outputs"},{"type":"paragraph","text":"\n        Once the **JSON-based dictionary** is working and trusted, you can expand:\n      "},{"type":"list","items":["Generate a **Tailwind config** from the dictionary","Export **MUI themes** mapped to token categories","Generate **native token objects** for iOS or Android","Build a central **icon registry** as part of the system"]},{"type":"paragraph","text":"\n        This isn’t about adding complexity—it’s about **scaling one coherent system** across multiple platforms.\n      "},{"type":"heading","text":"Stage 7: Adoption Through Enablement"},{"type":"paragraph","text":"\n        If you want this system to be adopted, there’s only one strategy that works:\n        **Make it easier than not using it.**\n      "},{"type":"list","items":["**Run workshops**","**Pair with engineers**","**Demo** how quickly you can build consistent UIs using the dictionary","Let designers see how their naming gets used **1:1 in production**"]},{"type":"paragraph","text":"\n        Once people realize it **reduces friction**, they’ll adopt it on their own.\n        The system succeeds because it **helps them do their job better**.\n      "},{"type":"heading","text":"Stage 8: Evolving with Change"},{"type":"paragraph","text":"\n        Designers iterate. They change their mind. A lot. And that’s a **feature, not a bug**.\n        The system must accommodate this reality:\n      "},{"type":"list","items":["**Updating tokens** should be collaborative and traceable","The **source of truth** must allow flexibility with structure","Tools like **Supernova** or **Specify** can enable designers to edit token values without touching code"]},{"type":"separator"},{"type":"heading","text":"Stage 9: Final Thoughts & What Comes Next"},{"type":"paragraph","text":"\n        You've moved beyond **fragmented styling** and **outdated documentation**.\n        You've created a **shared design vocabulary**, **aligned workflows** across disciplines, and introduced a system that **scales across technologies**.\n        But building the system is only part of the journey.\n      "},{"type":"paragraph","text":"\n        Now comes the real test: **proving it works**.\n        A system only justifies its existence if it brings **tangible value**—**consistency**, **scalability**, and **increased productivity**.\n        The next step is to **track adoption**, **measure impact**, and **surface wins**.\n      "},{"type":"paragraph","text":"\n        In the next chapter, we’ll explore how to **demonstrate the system’s effectiveness**.\n        What **KPIs** can you use? How do you **measure consistency**?\n        How can you **prove** that what you’ve built makes your organization **faster, more efficient, and more cohesive**?\n      "}]}}},"staticQueryHashes":["3159585216","3819027414","63159454"],"slicesMap":{}}